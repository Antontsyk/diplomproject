<div class="col-xs-12" id="demo" v-if="gridData.length">

    <div id="search" class="form-horizontal">
        <div class="form-group">
            <label class="col-sm-2 control-label">Поиск</label>
            <div class="col-sm-10">
                <p class="form-control-static"><input name="query" v-model="searchQuery" type="text" class="form-control" placeholder="Введите название проекта"></p>
            </div>
        </div>
    </div>
    <div style="max-height: 300px;overflow: auto;">
        <demo-grid
                :data="gridData"
                :columns="gridColumns"
                :filter-key="searchQuery">
        </demo-grid>
    </div>
</div>
<script type="text/x-template" id="grid-template">
    <table  class="table table-striped tableSearch">
        <thead>
        <tr>
            <th v-for="key in columns"
                @click="sortBy(key)"
                :class="{ active: sortKey == key }">
                {{ nameColumn(key) | capitalize }}
                <span class="arrow" :class="sortOrders[key] > 0 ? 'asc' : 'dsc'">
                                      </span>
            </th>
        </tr>
        </thead>
        <tbody>
        <tr v-for="entry in filteredData">
            <td v-for="key in columns">
                {{ key =='category'?selectCategoty(entry[key]):entry[key]  }}
            </td>
        </tr>
        </tbody>
    </table>
</script>
<script>
    Vue.component('demo-grid', {
        template: '#grid-template',
        props: {
            data: Array,
            columns: Array,
            filterKey: String
        },
        data: function () {
            var sortOrders = {}
            this.columns.forEach(function (key) {
                sortOrders[key] = 1
            })
            return {
                sortKey: '',
                sortOrders: sortOrders
            }
        },
        computed: {
            filteredData: function () {
                var sortKey = this.sortKey
                var filterKey = this.filterKey && this.filterKey.toLowerCase()
                var order = this.sortOrders[sortKey] || 1
                var data = this.data
                if (filterKey) {
                    data = data.filter(function (row) {
                        return Object.keys(row).some(function (key) {
                            return String(row[key]).toLowerCase().indexOf(filterKey) > -1
                        })
                    })
                }
                if (sortKey) {
                    data = data.slice().sort(function (a, b) {
                        a = a[sortKey]
                        b = b[sortKey]
                        return (a === b ? 0 : a > b ? 1 : -1) * order
                    });
                }

                var nameArray = [];
                data.map(function ( elem ) {
                    nameArray.push(elem.name);
                });

                var markersFilterArray = [];

                markerCluster.clearMarkers();
                markers.map(function ( marker, i ) {
                    var view = (nameArray.indexOf(marker.label) != -1) ? true : false;
                    marker.setVisible( view );
                    if( view ){
                        markersFilterArray.push(marker);
                    }
                });

                markerCluster.addMarkers(markersFilterArray);

                return data
            }
        },
        filters: {
            capitalize: function (str) {
                return str.charAt(0).toUpperCase() + str.slice(1)
            }
        },
        methods: {
            nameColumn: function( name ){
                switch ( name ){
                    case 'name':
                        return 'Название проекта'
                    case 'category':
                        return 'Категория'
                    default:
                        return name;
                }
            },
            selectCategoty: function ( id ){
                return window.selectCategoty(id);
            },
            sortBy: function (key) {
                this.sortKey = key
                this.sortOrders[key] = this.sortOrders[key] * -1
            }
        }
    })

    // bootstrap the demo
    var listLocation = new Vue({
        el: '#demo',
        data: {
            searchQuery: '',
            gridColumns: ['name', 'category'],
            gridData: [],
            dataUsers: ''
        },
        mounted: function(){
            this.getUsers();
        },
        methods: {
            getUsers: function(){
                this.$http.get('/getAllLocations').then( function(response) {

                    this.$data.dataUsers = response.body;
                    this.$data.gridData = [];

                    for( el in  this.$data.dataUsers){
                        var location = this.$data.dataUsers[el];
                        if( location.length ){
                            for ( var j = 0; j < location.length; j++ ){
                                this.$data.gridData.push( location[j] );
                            }
                        }
                    }
                    console.log(this.$data.gridData)
                }, function (response) {
                    console.log( response );
                });
            },
        }
    });
</script>